#!/usr/bin/env python

import numpy as np
from quasarnet import io
import fitsio
import sys

import argparse

parser=argparse.ArgumentParser()

parser.add_argument('--spectra',type=str, nargs='+', required=True)
        help='list of spectra files')

parser.add_argument('--sdrq',type=str, required=False, default=None)
        help='superset file')

parser.add_argument('--out',type=str, required=True)
        help='output file')

args=parser.parse_args()

## Try to load the DESI quasar mask.
## Otherwise use a hardcoded value (with warning).
try:
    from desitarget import desi_mask
    quasar_mask = desi_mask.mask('QSO')
except:
    print("WARN: can't load desi_mask, using hardcoded targetting value!")
    quasar_mask = 2**2

"""## If we have an sdrq, filter the tids from spall by those in sdrq.
if args.sdrq is not None:
    print('INFO: reading sdrq')
    sdrq = fitsio.FITS(args.sdrq)
    tids_sdrq = sdrq[1]['TARGETID'][:]
    print('INFO: done')"""

## Cycle through the spectra files, exctracting data from each one.
fl = []
tids = []
nread = 0
for i,f in enumerate(args.spectra):
    tids_f, fl_f = io.read_desi_spectra(f)
    tids.append(tids_f)
    fl.append(fl_f)
    print('INFO: read {:4d}/{:4d} files ({:.2%})'.format(i+1,len(args.spectra),(i+1)/len(args.spectra)))

# Concatenate all results to form single arrays.
tids = np.concatenate(tids)
fl = np.concatenate(fl)

## Write the output to a fits file, with flux/iv in the primary HDU, and a
## catalog of objects in the 1st extension.
h = fitsio.FITS(args.out,'rw',clobber=True)
h.write(fl)
h.write([tids], names=['TARGETID'])
h.close()
