#!/usr/bin/env python

import numpy as np
from quasarnet import io
import fitsio
import sys

import argparse

parser=argparse.ArgumentParser()
parser.add_argument('--spplates',type=str, nargs="+", required=True)
parser.add_argument('--spall',type=str, required=True)
parser.add_argument('--sdrq',type=str, required=False, default=None)
parser.add_argument('--out',type=str, required=True)

args=parser.parse_args()


## this is a dictionary (plate, mjd, fiberid) => thing_id
print('INFO: reading spall')
spall=io.read_spall(args.spall)
print('INFO: done')

tids_spall = np.array(list(spall.values()))
pmf_spall = np.array(list(spall.keys()))

if args.sdrq is not None:
    print('INFO: reading sdrq')
    sdrq = fitsio.FITS(args.sdrq)
    tids_sdrq = sdrq[1]['THING_ID'][:]
    print('INFO: done')
    w = np.in1d(tids_spall, tids_sdrq) & (tids_spall>0)
else:
    print('getting quasars from target bits')
    tb = {'BOSS_TARGET1':[10,11,12,13,14,15,16,17,18,19,40,41,42,43,44],
        'EBOSS_TARGET0':[10,11,12,13,14,15,16,17,18,20,22,30,31,33,34,35,40],
        'EBOSS_TARGET1':[9,10,11,12,13,14,15,16,17,18,30,31],
        'EBOSS_TARGET2':[0,2,4,20,21,23,24,25,26,27,31,32,33,34,50,51,
            52,53,54,55,56,57,58,59,60,61,62],
        'ANCILLARY_TARGET1':[0,1,2,3,4,5,7,8,9,10,13,14,15,24,25,26,27,31,32,
            33,53,54,55,56],
        'ANCILLARY_TARGET2':[0,1,2,3,4,5,7,8,9,10,13,14,15,24,
            25,26,27,31,32,33,53,54,55,56]
        }
    
    wqso = sp.zeros(len(tids_spall), dtype=bool)
    for kw,val in tb.items():
        mask = sum([2**b for b in val])
        wqso |= ((mask & spall[1][kw][:])>0)

    print('found {} quasar targets'.format(wqso.sum()))

plate_mjd = {}
print('populating dict')
i=0
for p,m,f in pmf_spall[w]:
    sys.stderr.write('\rINFO: populating dict: {}'.format(i*100/len(spall)))
    k = (p,m)
    if not k in plate_mjd:
        plate_mjd[k] = []
    plate_mjd[k].append(f)

print('\ndone')
tids = None
plate = None
mjd = None
fibs = None

for p,m in plate_mjd:
    fname = 'spPlate-{}-{}.fits'.format(p,m)
    f = [toto for toto in args.spplates if fname in toto]
    if len(f)==0:
        print('WARNING: file {} not found'.format(fname))
        sys.exit(1)
    if len(f)>1:
        print('WARNING: multiple files found', f)
        sys.exit(1)
    
    f=f[0]
    print('Reading file {}'.format(f))
    fibers = plate_mjd[(p,m)]
    aux = io.read_spplate(f, fibers)
    if aux is not None:
        tids_plate = [spall[(p,m,fib)] for fib in aux[0]]
        if tids is not None:
            tids = np.concatenate([tids, tids_plate])
            fl = np.concatenate([fl,aux[1]])
            plate = np.concatenate([plate, [p]*len(aux[0])])
            mjd = np.concatenate([mjd, [m]*len(aux[0])])
            fibs = np.concatenate([fibs, aux[0]])
        else:
            tids = np.array(tids_plate)
            fl = np.array(aux[1])
            plate = np.array([p]*len(aux[0]))
            mjd = np.array([m]*len(aux[0]))
            fibs = np.array(aux[0])

h=fitsio.FITS(args.out,'rw',clobber=True)
h.write(fl)
h.write([tids, plate, mjd, fibs], names=['TARGETID','PLATE','MJD','FIBERID'])
h.close()
