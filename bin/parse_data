#!/usr/bin/env python

import numpy as np
from quasarnet import io
import fitsio
#from astropy.io import fits
import sys

import argparse

parser=argparse.ArgumentParser()
parser.add_argument('--spplates',type=str, nargs="+", required=True)
parser.add_argument('--spall',type=str, required=True)
parser.add_argument('--sdrq',type=str, required=False, default=None)
parser.add_argument('--out',type=str, required=True)
parser.add_argument('--single-exposures', action='store_true', default=False,
                    required=False)
parser.add_argument('--spcframes',type=str, nargs="+", required=False)
parser.add_argument('--lmin', type = float, required=False,
                    default = 3600.)
parser.add_argument('--lmax', type = float, required=False,
                    default = 10000.)
parser.add_argument('--dll', type = float, required=False,
                    default = 1.e-3)
parser.add_argument('--mode', type = str, required=False, default='BOSS',
                    options=['BOSS','DESI','DESI_SPECTRA','DESI_COADD','DESI_SIM'])
parser.add_argument('--use-best-exposure', action='store_true', default=False,
                    required=False)
parser.add_argument('--use-random-exposure', action='store_true', default=False,
                    required=False)
parser.add_argument('--random-seed', type = int, required=False,
                    default = 0)
parser.add_argument('--verbose', action='store_true', default=False,
                    required=False)

args=parser.parse_args()

if args.single_exposures & (args.spcframes is None):
    print('INFO: No spCFrame files provided, will search in same directory as each spPlate file')
    import glob

## Construct a dictionary (plate, mjd, fiberid) => thing_id
print('INFO: reading spall')
tids_spall, thid_db = io.read_spall(args.spall)
pmf_spall = list(thid_db.keys())
print('INFO: done')

## If we have an sdrq, filter the tids from spall by those in sdrq.
if args.sdrq is not None:
    print('INFO: reading sdrq')
    sdrq = fitsio.FITS(args.sdrq)
    tids_sdrq = sdrq[1]['THING_ID'][:]
    print('INFO: done')
    wqso = np.in1d(tids_spall, tids_sdrq) & (tids_spall>0)
## Otherwise, filter by hardcoded targeting bits.
else:
    print('getting quasars from target bits')
    tb = utils.get_targeting_bits(args.mode,verbose=args.verbose,desi_period=desi_period,cmx_bitname=args.desi_cmx_bitname)

    # Open the spall file to extract further information.
    spall = fitsio.FITS(args.spall)
    plate_quality = spall[1]['PLATEQUALITY'][:]

    # Cycle through each targeting bit to build a mask including all bits.
    wqso = np.zeros(len(tids_spall), dtype=bool)
    for kw,val in tb.items():
        mask = sum([2**b for b in val])
        wqso_kw = (mask & spall[1][kw][:])>0
        print('INFO: found {} quasar targets with target bits {}'.format(wqso_kw.sum(),kw))
        wqso |= wqso_kw
    print('INFO: found {} quasar targets'.format(wqso.sum()))

    # Impose that the plate_quality must be 'good'
    #wqso &= (plate_quality == 'good')
    # This doesn't seem to worrk any more for some reason.
    wqso &= ((plate_quality == b'good') | (plate_quality == 'good'))
    print('INFO: after rejecting BAD plates, {} remain'.format(wqso.sum()))

    spall.close()

## Construct a dictionary describing the fiberids that were used in each
## (plate,mjd) pair for objects in our spall file.
plate_mjd = {}
for i,(p,m,f) in enumerate(np.array(pmf_spall)[wqso]):
    sys.stderr.write('\rINFO: populating dict: {:.1%}'.format(i/len(pmf_spall)))

    k = (p,m)
    if not k in plate_mjd:
        plate_mjd[k] = []
    plate_mjd[k].append(f)

## For each (plate,mjd) pair, find the relevant spPlate file and read the data.
print('\ndone')
fl = []
tids = []
plate = []
mjd = []
fibs = []
nread = 0

for p,m in plate_mjd:
    # Find all entries in args.spplates which contain information about this
    # (plate,mjd) pair. If no files are found, or if more than one file is
    # found, print a warning and exit.
    fname = 'spPlate-{}-{}.fits'.format(p,m)
    f = [toto for toto in args.spplates if fname in toto]
    if len(f)==0:
        print('WARNING: file {} not found'.format(fname))
        print('WARNING: args is {} '.format(args.spplates[0]))
        print('WARNING: ignoring file')
        continue
        #sys.exit(1)
    if len(f)>1:
        print('WARNING: multiple files found', f)
        print('WARNING: exiting')
        sys.exit(1)

    # Read the spPlate file found, using the list of relevant fibers from the
    # plate_mjd dictionary.
    f = f[0]
    print('Reading file {}, nread={:5d}, ntot={:5d}'.format(f,nread,len(plate_mjd)),end='\r')
    nread += 1
    fibers = plate_mjd[(p,m)]

    # Read data, either directly from the spPlate file or via spCFrame files.
    if args.single_exposures:
        # If no method of choosing an exposure is specified, use random.
        if (~args.use_best_exposure) and (~args.use_random_exposure):
            print('INFO: Using random exposure with seed {}'.format(args.random_seed))
            args.use_random_exposure = True

        aux = read_single_exposure(f, fibers, verbose=args.verbose,
            best_exp=args.use_best_exposure,
            random_exp=args.use_random_exposure, random_seed=args.random_seed,
            llmin=np.log10(args.lmin), llmax=np.log10(args.lmax), dll=args.dll,
            )
    else:
        aux = io.read_spplate(f, fibers, verbose=args.verbose,
            llmin=np.log10(args.lmin), llmax=np.log10(args.lmax), dll=args.dll,
            )

    # If data is read, add it to the data structures.
    if aux is not None:
        tids_plate = [thid_db[(p,m,fib)] for fib in aux[0]]
        tids.append(tids_plate)
        fl.append(aux[1])
        plate.append([p]*len(aux[0]))
        mjd.append([m]*len(aux[0]))
        fibs.append(aux[0])

# Concatenate all results to form single arrays.
tids = np.concatenate(tids)
fl = np.concatenate(fl)
plate = np.concatenate(plate)
mjd = np.concatenate(mjd)
fibs = np.concatenate(fibs)

## Write the output to a fits file, with flux/iv in the primary HDU, and a
## catalog of objects in the 1st extension.
h = fitsio.FITS(args.out,'rw',clobber=True)
h.write(fl)
h.write([tids, plate, mjd, fibs], names=['TARGETID','PLATE','MJD','FIBERID'])
h.close()
