#!/usr/bin/env python

import fitsio
import argparse
import numpy as np

from keras.models import load_model
from quasarnet.io import read_data, read_sdrq, wave, read_desi_truth
from scipy.interpolate import interp1d
from quasarnet.models import custom_loss
from picca import constants

parser=argparse.ArgumentParser()

parser.add_argument("--model",type=str,required=True)
parser.add_argument("--super-drq",type=str,required=False, default = None)
parser.add_argument("--truth",type=str,required=False, default = None)
parser.add_argument("--spall",type=str,required=False, default = None)
parser.add_argument("--data",type=str,required=True, default = None)
args=parser.parse_args()

if args.super_drq is not None:
    truth, tids2pmf = read_sdrq(args.super_drq)
elif args.truth is not None:
    truth = read_desi_truth(args.truth)
elif args.spall is not None:
    h=fitsio.FITS(args.spall)
    tids = h[1]['THING_ID'][:]
    z_spall = h[1]['Z'][:]
    zw_spall = h[1]['ZWARNING'][:]
    class_spall = h[1]['CLASS'][:]

    class_truth = np.zeros(len(z_spall))
    w=class_spall=='STAR  '
    class_truth[w]=1

    w=(class_spall=='QSO   ')
    class_truth[w]=3

    w=class_spall=='GALAXY'
    class_truth[w]=4

    w=zw_spall!=0
    class_truth[w]=1

    zc=3*(zw_spall==0)
    w=zc==0
    zc[w]=1
    truth = {t:(a,b,c) for t,a,b,c in zip(tids, class_truth, zc, z_spall)}

tids,X,Y,z,bal = read_data(args.data, truth)

model=load_model(args.model, custom_objects = {'custom_loss': custom_loss})
aux = model.predict(X[:,:,None])
p, bal_pred, box_pred_lya, box_pred_civ, box_pred_mgii, box_pred_hbeta, z_pred = aux
z_pred=z_pred[:,0]
bal_pred = bal_pred[:,0]
nboxes = box_pred_lya.shape[1]/2
box_lya = box_pred_lya[:,:nboxes].argmax(axis=1)
box_civ = box_pred_civ[:,:nboxes].argmax(axis=1)
box_mgii = box_pred_mgii[:,:nboxes].argmax(axis=1)
box_hbeta = box_pred_hbeta[:,:nboxes].argmax(axis=1)

nspec = box_lya.shape[0]
ispec = np.arange(nspec)
offset_lya = box_pred_lya[ispec, nboxes+box_lya]
offset_civ = box_pred_civ[ispec, nboxes+box_civ]
offset_mgii = box_pred_mgii[ispec, nboxes+box_mgii]
offset_hbeta = box_pred_hbeta[ispec, nboxes+box_hbeta]

i_to_wave = interp1d(np.arange(len(wave)), wave, bounds_error=False, fill_value=-1)
z_pred_lya = i_to_wave(X.shape[1]*(box_lya+offset_lya)/nboxes)
z_pred_lya = z_pred_lya/constants.absorber_IGM["LYA"]-1
z_pred_civ = i_to_wave(X.shape[1]*(box_civ+offset_civ)/nboxes)
z_pred_civ = z_pred_civ/constants.absorber_IGM["CIV(1548)"]-1
z_pred_mgii = i_to_wave(X.shape[1]*(box_mgii+offset_mgii)/nboxes)
z_pred_mgii = z_pred_mgii/constants.absorber_IGM["MgII(2796)"]-1
z_pred_hbeta = i_to_wave(X.shape[1]*(box_hbeta+offset_hbeta)/nboxes)
z_pred_hbeta = z_pred_hbeta/constants.absorber_IGM["Hbeta"]-1
perf = np.zeros((5,5))
for i in range(5):
    for j in range(5):
        w=(p.argmax(axis=1)==i) & (Y.argmax(axis=1)==j)
        perf[i,j]=w.sum()

norm = perf.sum(axis=0)
perf/=norm
