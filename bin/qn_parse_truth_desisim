#!/usr/bin/env python

import numpy as np
import fitsio
import argparse

from quasarnet import io

parser = argparse.ArgumentParser()

parser.add_argument('--truth', type=str, required=True,
        help='truth file')

parser.add_argument('--targets', type=str, required=True,
        help='targets file')

parser.add_argument('--bal-templates', type=str, required=True,
        help='BAL templates file')

parser.add_argument('--targeting-bits',type=str, required=True,
        choices=['DESI_TARGET','SV1_DESI_TARGET'],
        help='which targeting bits to use')

parser.add_argument('--out', type=str, required=True,
        help='output file')

args = parser.parse_args()

## Try to load the DESI quasar mask.
## Otherwise use a hardcoded value (with warning).
quasar_mask = utils.get_quasar_mask()

## Open the truth and targeting files and extract the relevant data.
cols_tr, colnames_tr = io.read_truth_desisim(args.truth)
cols_ta, colnames_ta = io.read_targets_desisim(args.targets,args.targeting_bits)

## Filter to only include QSO targets.
w_ta = (cols_ta[1] & quasar_mask)>0
print('INFO: {} objects are QSO targets (out of {})'.format(w_ta.sum(),len(w_ta)))
w = np.in1d(cols_tr[0],cols_ta[0][w_ta])
for c in cols_tr:
    c = c[w]

## Open the drq and extract the BAL data.
## Rearrange it into a tid: (flag,bi) dictionary.
bal_data = io.read_bal_data_desisim(args.truth,args.bal_templates)

## Insert the BAL data into arrays to lie alongside the superset data.
w = np.in1d(cols_tr[0], np.array(list(bal_data.keys())))
bal_flag = np.zeros(len(cols_tr[0]))
bal_flag[w] = np.array([bal_data[t][0] for t in cols_tr[0][w]])
bi_civ = np.zeros(len(cols_tr[0]))
bi_civ[w] = np.array([bal_data[t][1] for t in cols_tr[0][w]])
cols_tr += [bal_flag, bi_civ]
colnames_tr += ['BAL_FLAG', 'BI_CIV']

## Write the output truth file.
h = fitsio.FITS(args.out, 'rw', clobber=True)
h.write(cols_tr, names=colnames_tr)
h.close()
