#!/usr/bin/env python

from os.path import dirname
import argparse
import numpy as np
import fitsio
from IPython.display import SVG
from quasarnet import models
from keras.utils import plot_model
from keras.utils.vis_utils import model_to_dot
from keras.models import load_model

from quasarnet import io

parser = argparse.ArgumentParser()

parser.add_argument("--model", type = str, required=True)
parser.add_argument("--super-drq", type = str, required=False)
parser.add_argument("--drq", type = str, required=False)
parser.add_argument("--truth", type = str, required=False)
parser.add_argument("--data", type = str, required=True,nargs="*")
parser.add_argument("--epochs", type = int, required=False, default = 5)
parser.add_argument("--batch", type = int, required=False, default = 256)
parser.add_argument("--nboxes", type = int, required=False, default = 13)
parser.add_argument("--ndata", type = int, required=False, default = None)
parser.add_argument("--reg-conv", type = float, required=False, default = 0., help="L2 regularization")
parser.add_argument("--reg-fc", type = float, required=False, default = 0., help="L2 regularization")
parser.add_argument("--out", type = str, required=True)
parser.add_argument("--hist", type = str, required=False, default = None)
parser.add_argument("--lines", type = str, required=False, default = ["LYA"], nargs="*")
parser.add_argument("--bal", type = str, required=False, default = ["CIV(1548)"], nargs="*")
parser.add_argument('--fine-tune', action='store_true',required=False)
args = parser.parse_args()

drq = fitsio.FITS(args.drq)
bi_civ_dict = {t:b for t,b in zip(drq[1]['THING_ID'][:], drq[1]['BI_CIV'][:])}

sdrq={}
truth={}
if args.super_drq is not None:
    sdrq,_ = io.read_sdrq(args.super_drq)
if args.truth is not None:
    truth = io.read_desi_truth(args.truth)

for t,v in truth.items():
    sdrq[t]=v

tids = None
for f in args.data:
    if tids is None:
        tids,X,Y,z,bal = io.read_data(f, sdrq)
    else:
        aux = io.read_data(f, sdrq)
        tids = np.concatenate((tids, aux[0]))
        X = np.vstack((X, aux[1]))
        Y = np.vstack((Y, aux[2]))
        z = np.concatenate((z, aux[3]))
        bal = np.concatenate((bal, aux[4]))
## sample weights for class, z, bal

if args.ndata is not None:
    ndata = args.ndata
    tids = tids[:ndata]
    X = X[:ndata]
    Y = Y[:ndata]
    z = z[:ndata]
    bal = bal[:ndata]

box=[]
sample_weight = []
for l in args.lines:
    box_line, offset_line, weight_line = io.box_offset(z,nboxes=args.nboxes, line = l)
    w = (Y.argmax(axis=1)==2) | (Y.argmax(axis=1)==3)
    ## set to zero where object is not a QSO (the line confidence should be zero)
    box_line[~w]=0
    box.append(np.concatenate([box_line, offset_line], axis=-1))
    sample_weight.append(np.ones(bal.shape))

box_bal=[]
for l in args.bal:
    box_line, offset_line, weight_line = io.box_offset(z,nboxes=args.nboxes, line = l)
    bi_civ = bal*0-1
    for i,t in enumerate(tids):
        if t in bi_civ_dict:
            bi_civ[i] = bi_civ_dict[t]
    ## set to zero where object is not a QSO (the line confidence should be zero)
    wqso = (Y.argmax(axis=1)==2) | (Y.argmax(axis=1)==3)
    box_line[~wqso] = 0
    ## set to zero for confident non-bals:
    wnobal = (bal==0) & (bi_civ==0)
    box_line[wnobal] = 0

    ## use only spectra where visual flag and bi_civ do agree
    bal_weight = ((bal==0) & (bi_civ==0)) | ((bal==1) & (bi_civ>0))
    box_bal.append(np.concatenate([box_line, offset_line], axis=-1))
    sample_weight.append(bal_weight)

try:
#if True:
    print( args.model)
    model = getattr(models, args.model)(X[0,:,None].shape, boxes = args.nboxes, reg_conv = args.reg_conv, reg_fc=args.reg_fc, nlines = len(args.lines)+len(args.bal))
    print( "compiling model {}".format(args.model))
except:
#else:
    print( "loading model from {}".format(args.model))
    model = load_model(args.model, custom_objects = {'custom_loss': models.custom_loss})

if args.fine_tune:
    for layer in model.layers:
        if 'fc' not in layer.name:
            layer.trainable=False

#loss = ['binary_crossentropy']
loss = []
for i in range(len(args.lines)):
    loss.append(models.custom_loss)

for i in range(len(args.bal)):
    loss.append(models.custom_loss)

## add mean square error for redshift fit
model.compile(optimizer='adam', loss=loss,metrics=['accuracy'])

#objective = [bal]
objective = []

for b in box:
    objective.append(b)

for b in box_bal:
    objective.append(b)

print( "starting fit")
history = model.fit(X[:,:,None], objective, epochs = args.epochs, batch_size = args.batch, sample_weight = sample_weight)

model.save(args.out)

model.summary()

plot_model(model, to_file='model.png')
SVG(model_to_dot(model).create(prog='dot', format='svg'))

if args.hist is not None:
    print("output to file: {}".format(args.hist))
    import os.path
    if os.path.isfile(args.hist):
        fout = fitsio.FITS(args.hist)
        cols = {}
 
        for c in fout[1].get_colnames():
            cols[c] = fout[1][c][:]
        for k,v in history.history.items():
            cols[k] = np.concatenate((cols[k],v))
        fout.close()
        fout = fitsio.FITS(args.hist,'rw',clobber=True)
        fout.write(cols)

    else:
        cols = []
        fout = fitsio.FITS(args.hist,'rw')
        for v in history.history.values():
            cols.append(np.array(v))
        fout.write(cols, names=list(history.history.keys()))

    fout.close()
